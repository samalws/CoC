[minitrue doesn't have the "->" symbol built in, so we need to define it]
-> = λa:*.λb:*.∀x:a.b;
[minitrue also doesn't have infix operators, so the way to write "a function from A to B" would be "-> A B", not "A -> B"]

[function composition is also not built in, so we need to define that]
comp = λa:*.λb:*.λc:*. λf:(-> a b).λg:(-> b c). λx:a.g (f x);
comp : ∀a:*.∀b:*.∀c:*. -> (-> a b) (-> (-> b c) (-> a c));

[note that we check the type of comp after we define it, not before]
[you can reference code written in previous lines, but not code that hasn't been reached yet]
[note also that comp is able to use -> in its definition. if we defined comp before ->, then we wouldn't be able to do this]

[identity function and its type]
id = λa:*.λx:a.x;
idT = λa:*.-> a a; [idT A is the same thing as -> A A]
id : ∀a:*.idT a;

const = λa:*.λb:*.λx:a.λy:b.x;
const : ∀a:*.∀b:*.(-> a (-> b a));
ignore = λa:*.λb:*.λx:a.λy:b.y;

[equality]
eq = λa:*. λb:a.λc:a. ∀f:(∀x:a.*). -> (f b) (f c);
eq : ∀a:*. ∀b:a.∀c:a. *;

[proof eq is reflexive]
eqRefl = λa:*. λb:a. λf:(∀x:a.*). λfb:(f b). fb;
eqRefl : ∀a:*. ∀b:a. eq a b b;

[proof eq is transitive]
eqTrans = λa:*. λb:a.λc:a.λd:a. λebc:(eq a b c).λecd:(eq a c d). 
          λf:(∀x:a.*). comp (f b) (f c) (f d) (ebc f) (ecd f);
eqTrans : ∀a:*. ∀b:a.∀c:a.∀d:a. -> (eq a b c) (-> (eq a c d) (eq a b d));

[proof eq is symmetric]
eqSymm = λa:*. λb:a.λc:a. λebc:(eq a b c).
         ebc (λx:a. eq a x b) (eqRefl a b);
eqSymm : ∀a:*. ∀b:a.∀c:a. -> (eq a b c) (eq a c b);

[substitution property]
eqSubs = λt:*.λtt:*.λf:-> t tt.λx:t.λy:t.λexy:eq t x y.exy (λv:t.eq tt (f x) (f v)) (eqRefl tt (f x));
eqSubs : ∀t:*.∀tt:*.∀f:-> t tt.∀x:t.∀y:t.-> (eq t x y) (eq tt (f x) (f y));

[the natural numbers]
nat = ∀a:*.idT (idT a);
0 = λa:*.const (idT a) (idT a) (id a);
0 : nat;
succ = λn:nat.λa:*.λf:(idT a).λx:a.f (n a f x);
succ : idT nat;
add = λn:nat.λm:nat.n nat succ m;
add : -> nat (idT nat);
mul = λn:nat.λm:nat.n nat (add m) 0;
pow = λn:nat.λm:nat.n nat (mul m) (succ 0);

[proofs abt add and stuff]
succ2 = λn:nat.λa:*.λf:(idT a).λx:a.n a f (f x);
succ2 : idT nat;

[TODO...]
[succ2Eq : ∀n:nat.eq nat (succ n) (succ2 n)]
[MAYBE TODO?:]
[nSucc0EqN : ∀n:nat.eq nat n (n nat succ 0)]

addZeroLeft = λn:nat.eqRefl nat n;
addZeroLeft : ∀n:nat.eq nat n (add 0 n);
addSuccLeft = λn:nat.λm:nat.eqRefl nat (succ (add n m));
addSuccLeft : ∀n:nat.∀m:nat.eq nat (succ (add n m)) (add (succ n) m);

addAssocDef = λa:nat.λb:nat.λc:nat.eq nat (add a (add b c)) (add (add a b) c);

addAssoc0 = λb:nat.λc:nat.eqTrans nat (add 0 (add b c)) (add b c) (add (add 0 b) c) (eqRefl nat (add b c)) (eqRefl nat (add b c));
addAssoc0 : ∀b:nat.∀c:nat.addAssocDef 0 b c;
addAssocI = λa:nat.λb:nat.λc:nat.λh:addAssocDef a b c.
            eqTrans nat (add (succ a) (add b c)) (succ (add a (add b c))) (add (add (succ a) b) c)
                (eqSymm nat (succ (add a (add b c))) (add (succ a) (add b c)) (addSuccLeft a (add b c))) (
            eqTrans nat (succ (add a (add b c))) (succ (add (add a b) c)) (add (add (succ a) b) c)
                (eqSubs nat nat succ (add a (add b c)) (add (add a b) c) h) (
            eqTrans nat (succ (add (add a b) c)) (add (succ (add a b)) c) (add (add (succ a) b) c)
                (addSuccLeft (add a b) c)
                (eqSubs nat nat (λn:nat.add n c) (succ (add a b)) (add (succ a) b) (addSuccLeft a b))));
addAssocI : ∀a:nat.∀b:nat.∀c:nat.-> (addAssocDef a b c) (addAssocDef (succ a) b c);
